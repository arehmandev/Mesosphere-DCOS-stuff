Mappings:
  NATAmi:
    us-east-1:
      default: ami-4c9e4b24
    eu-west-1:
      default: ami-3760b040
    ap-northeast-1:
      default: ami-55c29e54
    eu-central-1:
      default: ami-204c7a3d
    us-west-2:
      default: ami-bb69128b
    ap-southeast-2:
      default: ami-996402a3
    us-gov-west-1:
      default: ami-e8ab1489
    sa-east-1:
      default: ami-b972dba4
    ap-southeast-1:
      default: ami-b082dae2
    us-west-1:
      default: ami-2b2b296e
  RegionToAmi:
    us-east-1:
      stable: ami-6d138f7a
    eu-west-1:
      stable: ami-b7cba3c4
    ap-northeast-1:
      stable: ami-965899f7
    eu-central-1:
      stable: ami-3ae31555
    us-west-2:
      stable: ami-dc6ba3bc
    ap-southeast-2:
      stable: ami-b1291dd2
    us-gov-west-1:
      stable: ami-b712acd6
    sa-east-1:
      stable: ami-61e3750d
    ap-southeast-1:
      stable: ami-3120fe52
    us-west-1:
      stable: ami-ee57148e
  Parameters:
    PublicSubnetRange:
      default: 10.0.4.0/22
    VPCSubnetRange:
      default: 10.0.0.0/16
    PublicSlaveInstanceType:
      default: m3.xlarge
    MasterInstanceType:
      default: m3.xlarge
    SlaveInstanceType:
      default: m3.xlarge
    PrivateSubnetRange:
      default: 10.0.0.0/22
    StackCreationTimeout:
      default: PT45M
Conditions:
  RegionIsUsEast1:
    'Fn::Equals':
      - Ref: 'AWS::Region'
      - us-east-1
  RegionIsUsGovWest1:
    'Fn::Equals':
      - Ref: 'AWS::Region'
      - us-gov-west-1
Description: DC/OS AWS CloudFormation Template
Outputs:
  PublicSlaveDnsAddress:
    Value:
      'Fn::GetAtt':
        - PublicSlaveLoadBalancer
        - DNSName
    Description: Public slaves
  DnsAddress:
    Value:
      'Fn::GetAtt':
        - ElasticLoadBalancer
        - DNSName
    Description: Mesos Master
  ExhibitorS3Bucket:
    Value:
      Ref: ExhibitorS3Bucket
    Description: Exhibitor S3 bucket name
Resources:
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      InstanceId:
        Ref: NATInstance
      DestinationCidrBlock: 0.0.0.0/0
  PrivateSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      NetworkAclId:
        Ref: PrivateNetworkAcl
  PublicSlaveLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      SecurityGroups:
        - Ref: PublicSlaveSecurityGroup
      InstanceType:
        'Fn::FindInMap':
          - Parameters
          - PublicSlaveInstanceType
          - default
      EbsOptimized: 'true'
      UserData:
        'Fn::Base64':
          'Fn::Join':
            - ''
            - - |
                #cloud-config
              - |
                "coreos":
              - |2
                  "units":
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Formats the /var/lib ephemeral drive
              - |2
                      Before=var-lib.mount dbus.service
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      RemainAfterExit=yes
              - |2
                      ExecStart=/bin/bash -c "(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)"
              - |2
                    "name": |-
              - |2
                      format-var-lib-ephemeral.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Mount /var/lib
              - |2
                      Before=dbus.service
              - |2
                      [Mount]
              - |2
                      What=/dev/xvdb
              - |2
                      Where=/var/lib
              - |2
                      Type=ext4
              - |2
                    "name": |-
              - |2
                      var-lib.mount
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      etcd.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      update-engine.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      locksmithd.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "name": |-
              - |2
                      systemd-resolved.service
              - |2
                  - "command": |-
              - |2
                      restart
              - |2
                    "name": |-
              - |2
                      systemd-journald.service
              - |2
                  - "command": |-
              - |2
                      restart
              - |2
                    "name": |-
              - |2
                      docker.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Before=dcos.target
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d
              - |2
                      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh
              - |2
                    "name": |-
              - |2
                      dcos-link-env.service
              - |2
                  - "content": |
              - |2
                      [Unit]
              - |2
                      Description=Pkgpanda: Download DC/OS to this host.
              - |2
                      After=network-online.target
              - |2
                      Wants=network-online.target
              - |2
                      ConditionPathExists=!/opt/mesosphere/
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/5df43052907c021eeb5de145419a3da1898c58a5.bootstrap.tar.xz
              - |2
                      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere
              - |2
                      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere
              - |2
                      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz
              - |2
                    "name": |-
              - |2
                      dcos-download.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=Pkgpanda: Specialize DC/OS for this host.
              - |2
                      Requires=dcos-download.service
              - |2
                      After=dcos-download.service
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      EnvironmentFile=/opt/mesosphere/environment
              - |2
                      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd
              - |2
                      [Install]
              - |2
                      WantedBy=multi-user.target
              - |2
                    "enable": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      dcos-setup.service
              - |2
                    "no_block": !!bool |-
              - |2
                      true
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |-
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Signal CloudFormation Success
              - |2
                      ConditionPathExists=!/var/lib/dcos-cfn-signal
              - |2
                      [Service]
              - |2
                      Type=simple
              - |2
                      Restart=on-failure
              - |2
                      StartLimitInterval=0
              - |2
                      RestartSec=15s
              - |2
                      EnvironmentFile=/opt/mesosphere/environment
              - |2
                      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata
              - |2
                      Environment="AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup"
              - |2
                      ExecStartPre=/bin/ping -c1 leader.mesos
              - |2
                      ExecStartPre=/opt/mesosphere/bin/cfn-signal
              - |2
                      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal
              - |2
                    "name": |-
              - |2
                      dcos-cfn-signal.service
              - |2
                    "no_block": !!bool |-
              - |2
                      true
              - |2
                  "update":
              - |2
                    "reboot-strategy": |-
              - |2
                      off
              - |
                "write_files":
              - |
                - "content": |
              - |2
                    https://downloads.dcos.io/dcos/stable
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-flags/repository-url
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    ["dcos-config--setup_2e94e4f724600dd9c9b3092f28f2b89ad9005673", "dcos-metadata--setup_2e94e4f724600dd9c9b3092f28f2b89ad9005673"]
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-flags/cluster-packages.json
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    [Journal]
              - |2
                    MaxLevelConsole=warning
              - |2
                    RateLimitInterval=1s
              - |2
                    RateLimitBurst=20000
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/systemd/journald.conf.d/dcos.conf
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    rexray:
              - |2
                      loglevel: info
              - |2
                      modules:
              - |2
                        default-admin:
              - |2
                          host: tcp://127.0.0.1:61003
              - |2
                      storageDrivers:
              - |2
                      - ec2
              - |2
                      volume:
              - |2
                        unmount:
              - |2
                          ignoreusedcount: true
              - |2
                  "path": |-
              - |2
                    /etc/rexray/config.yml
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - '    MESOS_CLUSTER='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider
              - |
                - "content": |
              - '    ADMINROUTER_ACTIVATE_AUTH_MODULE='
              - Ref: OAuthEnabled
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env
              - |
                - "content": |
              - |2
                    MASTER_SOURCE=exhibitor_uri
              - '    EXHIBITOR_URI=http://'
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ':8181/exhibitor/v1/cluster/status'
              - |+

              - '    EXHIBITOR_ADDRESS='
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ''
              - |+

              - |2
                    RESOLVERS=169.254.169.253
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config
              - |
                - "content": |
              - |2
                    EXHIBITOR_BACKEND=AWS_S3
              - '    AWS_REGION='
              - Ref: 'AWS::Region'
              - ''
              - |+

              - '    AWS_S3_BUCKET='
              - Ref: ExhibitorS3Bucket
              - ''
              - |+

              - '    AWS_S3_PREFIX='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor
              - |
                - "content": |
              - |2
                    {"uiConfiguration":{"plugins":{"banner":{"enabled":false,"backgroundColor":"#1E232F","foregroundColor":"#FFFFFF","headerTitle":null,"headerContent":null,"footerContent":null,"imagePath":null,"dismissible":null},"branding":{"enabled":false},"external-links": {"enabled": false},
              - |+

              - |2
                    "authentication":{"enabled":false},
              - |+

              - '    "oauth":{"enabled":'
              - Ref: OAuthEnabled
              - ',"authHost":"https://dcos.auth0.com"},'
              - |+

              - |+

              - |+

              - |2
                    "tracking":{"enabled":true}}}}
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json
              - |
                - "content": |
              - '    AWS_REGION='
              - Ref: 'AWS::Region'
              - ''
              - |+

              - '    AWS_STACK_ID='
              - Ref: 'AWS::StackId'
              - ''
              - |+

              - '    AWS_STACK_NAME='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - '    AWS_IAM_MASTER_ROLE_NAME='
              - Ref: MasterRole
              - ''
              - |+

              - '    AWS_IAM_SLAVE_ROLE_NAME='
              - Ref: SlaveRole
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata
              - |
                - "content": |
              - '    INTERNAL_MASTER_LB_DNSNAME='
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ''
              - |+

              - '    MASTER_LB_DNSNAME='
              - 'Fn::GetAtt':
                  - ElasticLoadBalancer
                  - DNSName
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames
              - |
                - "content": |-
              - |2
                    {}
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/slave_public
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/aws
      AssociatePublicIpAddress: 'true'
      ImageId:
        'Fn::FindInMap':
          - RegionToAmi
          - Ref: 'AWS::Region'
          - stable
      KeyName:
        Ref: KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          VirtualName: ephemeral0
      IamInstanceProfile:
        Ref: SlaveInstanceProfile
  MasterToPublicSlaveIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: MasterSecurityGroup
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: '-1'
  PrivateInboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      Egress: 'false'
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '100'
      RuleAction: allow
      PortRange:
        From: '0'
        To: '65535'
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable
  SlaveServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity:
        Ref: SlaveInstanceCount
      LaunchConfigurationName:
        Ref: SlaveLaunchConfig
      AvailabilityZones:
        - 'Fn::GetAtt':
            - PrivateSubnet
            - AvailabilityZone
      VPCZoneIdentifier:
        - Ref: PrivateSubnet
      MaxSize:
        Ref: SlaveInstanceCount
      Tags:
        - Value: mesos-slave
          Key: role
          PropagateAtLaunch: 'true'
      MinSize:
        Ref: SlaveInstanceCount
    DependsOn: GatewayToInternet
    CreationPolicy:
      ResourceSignal:
        Timeout:
          'Fn::FindInMap':
            - Parameters
            - StackCreationTimeout
            - default
        Count:
          Ref: SlaveInstanceCount
  PublicSlaveServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity:
        Ref: PublicSlaveInstanceCount
      LaunchConfigurationName:
        Ref: PublicSlaveLaunchConfig
      AvailabilityZones:
        - 'Fn::GetAtt':
            - PublicSubnet
            - AvailabilityZone
      VPCZoneIdentifier:
        - Ref: PublicSubnet
      MaxSize:
        Ref: PublicSlaveInstanceCount
      Tags:
        - Value: mesos-slave
          Key: role
          PropagateAtLaunch: 'true'
      LoadBalancerNames:
        - Ref: PublicSlaveLoadBalancer
      MinSize:
        Ref: PublicSlaveInstanceCount
    DependsOn: GatewayToInternet
    CreationPolicy:
      ResourceSignal:
        Timeout:
          'Fn::FindInMap':
            - Parameters
            - StackCreationTimeout
            - default
        Count:
          Ref: PublicSlaveInstanceCount
  SlaveSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Mesos Slaves
      VpcId:
        Ref: Vpc
  SlaveToMasterIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: SlaveSecurityGroup
      GroupId:
        Ref: MasterSecurityGroup
      IpProtocol: '-1'
  SlaveToSlaveIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: SlaveSecurityGroup
      GroupId:
        Ref: SlaveSecurityGroup
      IpProtocol: '-1'
  PublicSlaveIngressOne:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '0'
      ToPort: '21'
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: tcp
  NATInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      SourceDestCheck: 'false'
      InstanceType: m3.medium
      ImageId:
        'Fn::FindInMap':
          - NATAmi
          - Ref: 'AWS::Region'
          - default
      NetworkInterfaces:
        - SubnetId:
            Ref: PublicSubnet
          DeviceIndex: '0'
          GroupSet:
            - Ref: SlaveSecurityGroup
            - Ref: MasterSecurityGroup
            - Ref: AdminSecurityGroup
          DeleteOnTermination: 'true'
          AssociatePublicIpAddress: 'true'
      KeyName:
        Ref: KeyName
    DependsOn: GatewayToInternet
  MasterLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      SecurityGroups:
        - Ref: MasterSecurityGroup
        - Ref: AdminSecurityGroup
      InstanceType:
        'Fn::FindInMap':
          - Parameters
          - MasterInstanceType
          - default
      EbsOptimized: 'true'
      UserData:
        'Fn::Base64':
          'Fn::Join':
            - ''
            - - |
                #cloud-config
              - |
                "coreos":
              - |2
                  "units":
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Formats the /var/lib ephemeral drive
              - |2
                      Before=var-lib.mount dbus.service
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      RemainAfterExit=yes
              - |2
                      ExecStart=/bin/bash -c "(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)"
              - |2
                    "name": |-
              - |2
                      format-var-lib-ephemeral.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Mount /var/lib
              - |2
                      Before=dbus.service
              - |2
                      [Mount]
              - |2
                      What=/dev/xvdb
              - |2
                      Where=/var/lib
              - |2
                      Type=ext4
              - |2
                    "name": |-
              - |2
                      var-lib.mount
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      etcd.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      update-engine.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      locksmithd.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "name": |-
              - |2
                      systemd-resolved.service
              - |2
                  - "command": |-
              - |2
                      restart
              - |2
                    "name": |-
              - |2
                      systemd-journald.service
              - |2
                  - "command": |-
              - |2
                      restart
              - |2
                    "name": |-
              - |2
                      docker.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Before=dcos.target
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d
              - |2
                      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh
              - |2
                    "name": |-
              - |2
                      dcos-link-env.service
              - |2
                  - "content": |
              - |2
                      [Unit]
              - |2
                      Description=Pkgpanda: Download DC/OS to this host.
              - |2
                      After=network-online.target
              - |2
                      Wants=network-online.target
              - |2
                      ConditionPathExists=!/opt/mesosphere/
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/5df43052907c021eeb5de145419a3da1898c58a5.bootstrap.tar.xz
              - |2
                      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere
              - |2
                      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere
              - |2
                      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz
              - |2
                    "name": |-
              - |2
                      dcos-download.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=Pkgpanda: Specialize DC/OS for this host.
              - |2
                      Requires=dcos-download.service
              - |2
                      After=dcos-download.service
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      EnvironmentFile=/opt/mesosphere/environment
              - |2
                      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd
              - |2
                      [Install]
              - |2
                      WantedBy=multi-user.target
              - |2
                    "enable": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      dcos-setup.service
              - |2
                    "no_block": !!bool |-
              - |2
                      true
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |-
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Signal CloudFormation Success
              - |2
                      ConditionPathExists=!/var/lib/dcos-cfn-signal
              - |2
                      [Service]
              - |2
                      Type=simple
              - |2
                      Restart=on-failure
              - |2
                      StartLimitInterval=0
              - |2
                      RestartSec=15s
              - |2
                      EnvironmentFile=/opt/mesosphere/environment
              - |2
                      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata
              - |2
                      Environment="AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup"
              - |2
                      ExecStartPre=/bin/ping -c1 leader.mesos
              - |2
                      ExecStartPre=/opt/mesosphere/bin/cfn-signal
              - |2
                      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal
              - |2
                    "name": |-
              - |2
                      dcos-cfn-signal.service
              - |2
                    "no_block": !!bool |-
              - |2
                      true
              - |2
                  "update":
              - |2
                    "reboot-strategy": |-
              - |2
                      off
              - |
                "write_files":
              - |
                - "content": |
              - |2
                    https://downloads.dcos.io/dcos/stable
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-flags/repository-url
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    ["dcos-config--setup_2e94e4f724600dd9c9b3092f28f2b89ad9005673", "dcos-metadata--setup_2e94e4f724600dd9c9b3092f28f2b89ad9005673"]
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-flags/cluster-packages.json
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    [Journal]
              - |2
                    MaxLevelConsole=warning
              - |2
                    RateLimitInterval=1s
              - |2
                    RateLimitBurst=20000
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/systemd/journald.conf.d/dcos.conf
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    rexray:
              - |2
                      loglevel: info
              - |2
                      modules:
              - |2
                        default-admin:
              - |2
                          host: tcp://127.0.0.1:61003
              - |2
                      storageDrivers:
              - |2
                      - ec2
              - |2
                      volume:
              - |2
                        unmount:
              - |2
                          ignoreusedcount: true
              - |2
                  "path": |-
              - |2
                    /etc/rexray/config.yml
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - '    MESOS_CLUSTER='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider
              - |
                - "content": |
              - '    ADMINROUTER_ACTIVATE_AUTH_MODULE='
              - Ref: OAuthEnabled
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env
              - |
                - "content": |
              - |2
                    MASTER_SOURCE=exhibitor_uri
              - '    EXHIBITOR_URI=http://'
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ':8181/exhibitor/v1/cluster/status'
              - |+

              - '    EXHIBITOR_ADDRESS='
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ''
              - |+

              - |2
                    RESOLVERS=169.254.169.253
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config
              - |
                - "content": |
              - |2
                    EXHIBITOR_BACKEND=AWS_S3
              - '    AWS_REGION='
              - Ref: 'AWS::Region'
              - ''
              - |+

              - '    AWS_S3_BUCKET='
              - Ref: ExhibitorS3Bucket
              - ''
              - |+

              - '    AWS_S3_PREFIX='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor
              - |
                - "content": |
              - |2
                    {"uiConfiguration":{"plugins":{"banner":{"enabled":false,"backgroundColor":"#1E232F","foregroundColor":"#FFFFFF","headerTitle":null,"headerContent":null,"footerContent":null,"imagePath":null,"dismissible":null},"branding":{"enabled":false},"external-links": {"enabled": false},
              - |+

              - |2
                    "authentication":{"enabled":false},
              - |+

              - '    "oauth":{"enabled":'
              - Ref: OAuthEnabled
              - ',"authHost":"https://dcos.auth0.com"},'
              - |+

              - |+

              - |+

              - |2
                    "tracking":{"enabled":true}}}}
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json
              - |
                - "content": |
              - '    AWS_REGION='
              - Ref: 'AWS::Region'
              - ''
              - |+

              - '    AWS_STACK_ID='
              - Ref: 'AWS::StackId'
              - ''
              - |+

              - '    AWS_STACK_NAME='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - '    AWS_IAM_MASTER_ROLE_NAME='
              - Ref: MasterRole
              - ''
              - |+

              - '    AWS_IAM_SLAVE_ROLE_NAME='
              - Ref: SlaveRole
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata
              - |
                - "content": |
              - '    INTERNAL_MASTER_LB_DNSNAME='
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ''
              - |+

              - '    MASTER_LB_DNSNAME='
              - 'Fn::GetAtt':
                  - ElasticLoadBalancer
                  - DNSName
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames
              - |
                - "content": |-
              - |2
                    {}
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/master
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/aws_master
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/aws
      AssociatePublicIpAddress: 'true'
      ImageId:
        'Fn::FindInMap':
          - RegionToAmi
          - Ref: 'AWS::Region'
          - stable
      KeyName:
        Ref: KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          VirtualName: ephemeral0
      IamInstanceProfile:
        Ref: MasterInstanceProfile
  PublicSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  MasterInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: MasterRole
  PrivateOutboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      Egress: 'true'
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber: '100'
      RuleAction: allow
      PortRange:
        From: '0'
        To: '65535'
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId:
        Ref: Vpc
  MasterServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName:
        Ref: MasterLaunchConfig
      AvailabilityZones:
        - 'Fn::GetAtt':
            - PublicSubnet
            - AvailabilityZone
      VPCZoneIdentifier:
        - Ref: PublicSubnet
      MaxSize: 1
      Tags:
        - Value: mesos-master
          Key: role
          PropagateAtLaunch: 'true'
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
        - Ref: InternalMasterLoadBalancer
      MinSize: 1
    DependsOn: GatewayToInternet
    CreationPolicy:
      ResourceSignal:
        Timeout:
          'Fn::FindInMap':
            - Parameters
            - StackCreationTimeout
            - default
        Count: 1
  PublicSlaveSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Mesos Slaves Public
      VpcId:
        Ref: Vpc
  PublicSlaveIngressFive:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '23'
      ToPort: '5050'
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: udp
  PublicSlaveIngressTwo:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '23'
      ToPort: '5050'
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: tcp
  InternalMasterLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - Ref: LbSecurityGroup
        - Ref: AdminSecurityGroup
        - Ref: SlaveSecurityGroup
        - Ref: PublicSlaveSecurityGroup
        - Ref: MasterSecurityGroup
      Listeners:
        - LoadBalancerPort: '5050'
          InstancePort: '5050'
          InstanceProtocol: HTTP
          Protocol: HTTP
        - LoadBalancerPort: '2181'
          InstancePort: '2181'
          InstanceProtocol: TCP
          Protocol: TCP
        - LoadBalancerPort: '8181'
          InstancePort: '8181'
          InstanceProtocol: HTTP
          Protocol: HTTP
        - LoadBalancerPort: '80'
          InstancePort: '80'
          InstanceProtocol: TCP
          Protocol: TCP
        - LoadBalancerPort: '443'
          InstancePort: '443'
          InstanceProtocol: TCP
          Protocol: TCP
        - LoadBalancerPort: '8080'
          InstancePort: '8080'
          InstanceProtocol: HTTP
          Protocol: HTTP
      HealthCheck:
        Interval: '30'
        UnhealthyThreshold: '2'
        HealthyThreshold: '2'
        Timeout: '5'
        Target: 'TCP:5050'
      Scheme: internal
      Subnets:
        - Ref: PublicSubnet
  PublicSlaveToPublicSlaveIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: PublicSlaveSecurityGroup
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: '-1'
  SlaveToPublicSlaveIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: SlaveSecurityGroup
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: '-1'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
    DependsOn: Vpc
  MasterToMasterIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: MasterSecurityGroup
      GroupId:
        Ref: MasterSecurityGroup
      IpProtocol: '-1'
  SlaveToMasterLBIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '2181'
      ToPort: '2181'
      SourceSecurityGroupId:
        Ref: SlaveSecurityGroup
      GroupId:
        Ref: LbSecurityGroup
      IpProtocol: tcp
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      EnableDnsHostnames: 'true'
      CidrBlock:
        'Fn::FindInMap':
          - Parameters
          - VPCSubnetRange
          - default
      EnableDnsSupport: 'true'
  PublicSlaveIngressFour:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '0'
      ToPort: '21'
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: udp
  MasterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:DeleteObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketPolicy'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:ListMultipartUploadParts'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - 'Fn::Join':
                      - ''
                      - - 'Fn::If':
                            - RegionIsUsGovWest1
                            - 'arn:aws-us-gov:s3:::'
                            - 'arn:aws:s3:::'
                        - Ref: ExhibitorS3Bucket
                        - /*
                  - 'Fn::Join':
                      - ''
                      - - 'Fn::If':
                            - RegionIsUsGovWest1
                            - 'arn:aws-us-gov:s3:::'
                            - 'arn:aws:s3:::'
                        - Ref: ExhibitorS3Bucket
                Effect: Allow
              - Action:
                  - 'cloudformation:*'
                Resource:
                  - Ref: 'AWS::StackId'
                  - 'Fn::Join':
                      - ''
                      - - Ref: 'AWS::StackId'
                        - /*
                Effect: Allow
              - Action:
                  - 'ec2:DescribeKeyPairs'
                  - 'ec2:DescribeSubnets'
                  - 'autoscaling:DescribeLaunchConfigurations'
                  - 'autoscaling:UpdateAutoScalingGroup'
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'autoscaling:DescribeScalingActivities'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                Resource: '*'
                Effect: Allow
          PolicyName: root
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: Vpc
    DependsOn: InternetGateway
  SlaveInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: SlaveRole
  SlaveLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      SecurityGroups:
        - Ref: SlaveSecurityGroup
      InstanceType:
        'Fn::FindInMap':
          - Parameters
          - SlaveInstanceType
          - default
      EbsOptimized: 'true'
      UserData:
        'Fn::Base64':
          'Fn::Join':
            - ''
            - - |
                #cloud-config
              - |
                "coreos":
              - |2
                  "units":
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Formats the /var/lib ephemeral drive
              - |2
                      Before=var-lib.mount dbus.service
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      RemainAfterExit=yes
              - |2
                      ExecStart=/bin/bash -c "(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)"
              - |2
                    "name": |-
              - |2
                      format-var-lib-ephemeral.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Mount /var/lib
              - |2
                      Before=dbus.service
              - |2
                      [Mount]
              - |2
                      What=/dev/xvdb
              - |2
                      Where=/var/lib
              - |2
                      Type=ext4
              - |2
                    "name": |-
              - |2
                      var-lib.mount
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      etcd.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      update-engine.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "mask": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      locksmithd.service
              - |2
                  - "command": |-
              - |2
                      stop
              - |2
                    "name": |-
              - |2
                      systemd-resolved.service
              - |2
                  - "command": |-
              - |2
                      restart
              - |2
                    "name": |-
              - |2
                      systemd-journald.service
              - |2
                  - "command": |-
              - |2
                      restart
              - |2
                    "name": |-
              - |2
                      docker.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Before=dcos.target
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d
              - |2
                      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh
              - |2
                    "name": |-
              - |2
                      dcos-link-env.service
              - |2
                  - "content": |
              - |2
                      [Unit]
              - |2
                      Description=Pkgpanda: Download DC/OS to this host.
              - |2
                      After=network-online.target
              - |2
                      Wants=network-online.target
              - |2
                      ConditionPathExists=!/opt/mesosphere/
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/5df43052907c021eeb5de145419a3da1898c58a5.bootstrap.tar.xz
              - |2
                      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere
              - |2
                      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere
              - |2
                      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz
              - |2
                    "name": |-
              - |2
                      dcos-download.service
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |
              - |2
                      [Unit]
              - |2
                      Description=Pkgpanda: Specialize DC/OS for this host.
              - |2
                      Requires=dcos-download.service
              - |2
                      After=dcos-download.service
              - |2
                      [Service]
              - |2
                      Type=oneshot
              - |2
                      StandardOutput=journal+console
              - |2
                      StandardError=journal+console
              - |2
                      EnvironmentFile=/opt/mesosphere/environment
              - |2
                      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd
              - |2
                      [Install]
              - |2
                      WantedBy=multi-user.target
              - |2
                    "enable": !!bool |-
              - |2
                      true
              - |2
                    "name": |-
              - |2
                      dcos-setup.service
              - |2
                    "no_block": !!bool |-
              - |2
                      true
              - |2
                  - "command": |-
              - |2
                      start
              - |2
                    "content": |-
              - |2
                      [Unit]
              - |2
                      Description=AWS Setup: Signal CloudFormation Success
              - |2
                      ConditionPathExists=!/var/lib/dcos-cfn-signal
              - |2
                      [Service]
              - |2
                      Type=simple
              - |2
                      Restart=on-failure
              - |2
                      StartLimitInterval=0
              - |2
                      RestartSec=15s
              - |2
                      EnvironmentFile=/opt/mesosphere/environment
              - |2
                      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata
              - |2
                      Environment="AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup"
              - |2
                      ExecStartPre=/bin/ping -c1 leader.mesos
              - |2
                      ExecStartPre=/opt/mesosphere/bin/cfn-signal
              - |2
                      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal
              - |2
                    "name": |-
              - |2
                      dcos-cfn-signal.service
              - |2
                    "no_block": !!bool |-
              - |2
                      true
              - |2
                  "update":
              - |2
                    "reboot-strategy": |-
              - |2
                      off
              - |
                "write_files":
              - |
                - "content": |
              - |2
                    https://downloads.dcos.io/dcos/stable
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-flags/repository-url
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    ["dcos-config--setup_2e94e4f724600dd9c9b3092f28f2b89ad9005673", "dcos-metadata--setup_2e94e4f724600dd9c9b3092f28f2b89ad9005673"]
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-flags/cluster-packages.json
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    [Journal]
              - |2
                    MaxLevelConsole=warning
              - |2
                    RateLimitInterval=1s
              - |2
                    RateLimitBurst=20000
              - |2
                  "owner": |-
              - |2
                    root
              - |2
                  "path": |-
              - |2
                    /etc/systemd/journald.conf.d/dcos.conf
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - |2
                    rexray:
              - |2
                      loglevel: info
              - |2
                      modules:
              - |2
                        default-admin:
              - |2
                          host: tcp://127.0.0.1:61003
              - |2
                      storageDrivers:
              - |2
                      - ec2
              - |2
                      volume:
              - |2
                        unmount:
              - |2
                          ignoreusedcount: true
              - |2
                  "path": |-
              - |2
                    /etc/rexray/config.yml
              - |2
                  "permissions": |-
              - |2
                    0644
              - |
                - "content": |
              - '    MESOS_CLUSTER='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider
              - |
                - "content": |
              - '    ADMINROUTER_ACTIVATE_AUTH_MODULE='
              - Ref: OAuthEnabled
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env
              - |
                - "content": |
              - |2
                    MASTER_SOURCE=exhibitor_uri
              - '    EXHIBITOR_URI=http://'
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ':8181/exhibitor/v1/cluster/status'
              - |+

              - '    EXHIBITOR_ADDRESS='
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ''
              - |+

              - |2
                    RESOLVERS=169.254.169.253
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config
              - |
                - "content": |
              - |2
                    EXHIBITOR_BACKEND=AWS_S3
              - '    AWS_REGION='
              - Ref: 'AWS::Region'
              - ''
              - |+

              - '    AWS_S3_BUCKET='
              - Ref: ExhibitorS3Bucket
              - ''
              - |+

              - '    AWS_S3_PREFIX='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor
              - |
                - "content": |
              - |2
                    {"uiConfiguration":{"plugins":{"banner":{"enabled":false,"backgroundColor":"#1E232F","foregroundColor":"#FFFFFF","headerTitle":null,"headerContent":null,"footerContent":null,"imagePath":null,"dismissible":null},"branding":{"enabled":false},"external-links": {"enabled": false},
              - |+

              - |2
                    "authentication":{"enabled":false},
              - |+

              - '    "oauth":{"enabled":'
              - Ref: OAuthEnabled
              - ',"authHost":"https://dcos.auth0.com"},'
              - |+

              - |+

              - |+

              - |2
                    "tracking":{"enabled":true}}}}
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json
              - |
                - "content": |
              - '    AWS_REGION='
              - Ref: 'AWS::Region'
              - ''
              - |+

              - '    AWS_STACK_ID='
              - Ref: 'AWS::StackId'
              - ''
              - |+

              - '    AWS_STACK_NAME='
              - Ref: 'AWS::StackName'
              - ''
              - |+

              - '    AWS_IAM_MASTER_ROLE_NAME='
              - Ref: MasterRole
              - ''
              - |+

              - '    AWS_IAM_SLAVE_ROLE_NAME='
              - Ref: SlaveRole
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata
              - |
                - "content": |
              - '    INTERNAL_MASTER_LB_DNSNAME='
              - 'Fn::GetAtt':
                  - InternalMasterLoadBalancer
                  - DNSName
              - ''
              - |+

              - '    MASTER_LB_DNSNAME='
              - 'Fn::GetAtt':
                  - ElasticLoadBalancer
                  - DNSName
              - ''
              - |+

              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames
              - |
                - "content": |-
              - |2
                    {}
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/slave
              - |
                - "content": ""
              - |2
                  "path": |-
              - |2
                    /etc/mesosphere/roles/aws
      AssociatePublicIpAddress: 'false'
      ImageId:
        'Fn::FindInMap':
          - RegionToAmi
          - Ref: 'AWS::Region'
          - stable
      KeyName:
        Ref: KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          VirtualName: ephemeral0
      IamInstanceProfile:
        Ref: SlaveInstanceProfile
  DHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainNameServers:
        - AmazonProvidedDNS
      DomainName:
        'Fn::If':
          - RegionIsUsEast1
          - ec2.internal
          - 'Fn::Join':
              - ''
              - - Ref: 'AWS::Region'
                - .compute.internal
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Private
          Key: Network
      CidrBlock:
        'Fn::FindInMap':
          - Parameters
          - PrivateSubnetRange
          - default
      VpcId:
        Ref: Vpc
    DependsOn: Vpc
  AdminSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - CidrIp:
            Ref: AdminLocation
          FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
        - CidrIp:
            Ref: AdminLocation
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
        - CidrIp:
            Ref: AdminLocation
          FromPort: '443'
          ToPort: '443'
          IpProtocol: tcp
      GroupDescription: Enable admin access to servers
      VpcId:
        Ref: Vpc
  MasterToSlaveIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: MasterSecurityGroup
      GroupId:
        Ref: SlaveSecurityGroup
      IpProtocol: '-1'
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId:
        Ref: Vpc
  PublicSlaveIngressSix:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '5052'
      ToPort: '32000'
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: udp
  PublicSlaveToSlaveIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: PublicSlaveSecurityGroup
      GroupId:
        Ref: SlaveSecurityGroup
      IpProtocol: '-1'
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId:
        Ref: Vpc
  MasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - FromPort: '5050'
          ToPort: '5050'
          SourceSecurityGroupId:
            Ref: LbSecurityGroup
          IpProtocol: tcp
        - FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId:
            Ref: LbSecurityGroup
          IpProtocol: tcp
        - FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId:
            Ref: LbSecurityGroup
          IpProtocol: tcp
        - FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId:
            Ref: LbSecurityGroup
          IpProtocol: tcp
        - FromPort: '8181'
          ToPort: '8181'
          SourceSecurityGroupId:
            Ref: LbSecurityGroup
          IpProtocol: tcp
        - FromPort: '2181'
          ToPort: '2181'
          SourceSecurityGroupId:
            Ref: LbSecurityGroup
          IpProtocol: tcp
      GroupDescription: Mesos Masters
      VpcId:
        Ref: Vpc
  ExhibitorS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
  PublicSlaveToMasterIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: PublicSlaveSecurityGroup
      GroupId:
        Ref: MasterSecurityGroup
      IpProtocol: '-1'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: GatewayToInternet
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId:
        Ref: Vpc
    DependsOn: Vpc
  PublicSlaveIngressThree:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '5052'
      ToPort: '32000'
      GroupId:
        Ref: PublicSlaveSecurityGroup
      IpProtocol: tcp
  OutboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      Egress: 'true'
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      RuleAction: allow
      PortRange:
        From: '0'
        To: '65535'
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
  InboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      RuleAction: allow
      PortRange:
        From: '0'
        To: '65535'
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
  VPCDHCPOptionsAssociation:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId:
        Ref: Vpc
      DhcpOptionsId:
        Ref: DHCPOptions
    DependsOn: Vpc
  PublicSlaveLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - Ref: PublicSlaveSecurityGroup
      HealthCheck:
        Interval: '5'
        UnhealthyThreshold: '2'
        HealthyThreshold: '2'
        Timeout: '2'
        Target: 'HTTP:9090/_haproxy_health_check'
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          InstanceProtocol: TCP
          Protocol: TCP
        - LoadBalancerPort: '443'
          InstancePort: '443'
          InstanceProtocol: TCP
          Protocol: TCP
      Subnets:
        - Ref: PublicSubnet
    DependsOn: GatewayToInternet
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - Ref: LbSecurityGroup
        - Ref: AdminSecurityGroup
      HealthCheck:
        Interval: '30'
        UnhealthyThreshold: '2'
        HealthyThreshold: '2'
        Timeout: '5'
        Target: 'TCP:5050'
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          InstanceProtocol: TCP
          Protocol: TCP
        - LoadBalancerPort: '443'
          InstancePort: '443'
          InstanceProtocol: TCP
          Protocol: TCP
      Subnets:
        - Ref: PublicSubnet
    DependsOn: GatewayToInternet
  SlaveRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'cloudformation:*'
                Resource:
                  - Ref: 'AWS::StackId'
                  - 'Fn::Join':
                      - ''
                      - - Ref: 'AWS::StackId'
                        - /*
                Effect: Allow
              - Action:
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeInstances'
                  - 'ec2:CreateVolume'
                  - 'ec2:DeleteVolume'
                  - 'ec2:AttachVolume'
                  - 'ec2:DetachVolume'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeVolumeStatus'
                  - 'ec2:DescribeVolumeAttribute'
                  - 'ec2:CreateSnapshot'
                  - 'ec2:CopySnapshot'
                  - 'ec2:DeleteSnapshot'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:DescribeSnapshotAttribute'
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Effect: Allow
          PolicyName: Slaves
  LbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Mesos Master LB
      VpcId:
        Ref: Vpc
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value:
            Ref: 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      CidrBlock:
        'Fn::FindInMap':
          - Parameters
          - PublicSubnetRange
          - default
      VpcId:
        Ref: Vpc
    DependsOn: Vpc
Metadata:
  DcosImageCommit: 602edc1b4da9364297d166d4857fc8ed7b0b65ca
  TemplateGenerationDate: '2017-02-11 00:06:51.487302'
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  OAuthEnabled:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: |-

      Enable OAuth authentication
    Default: 'true'
  SlaveInstanceCount:
    Type: Number
    Description: 'Required: Specify the number of private agent nodes or accept the default.'
    Default: '5'
  PublicSlaveInstanceCount:
    Type: Number
    Description: 'Required: Specify the number of public agent nodes or accept the default.'
    Default: '1'
  AdminLocation:
    AllowedPattern: '^([0-9]+\.){3}[0-9]+\/[0-9]+$'
    Description: >-
      Optional: Specify the IP range to whitelist for access to the admin zone.
      Must be a valid CIDR.
    Default: 0.0.0.0/0
    Type: String
    ConstraintDescription: must be a valid CIDR.
    MinLength: '9'
    MaxLength: '18'
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: 'Required: Specify your AWS EC2 Key Pair.'
